version: "3.9"

services:
  backendpvoperation:
    build: ./BackendPVOperation
    container_name: flask-app
    command: python run.py
    ports:
      - "5000:5000"
    depends_on:
      mongo-server:
        condition: service_healthy
      redis-server:
        condition: service_healthy
    environment:
      FLASK_ENV: production  # ⬅️ Para melhor performance na demo
      MONGO_URI: mongodb://mongo-server:27017/bdaneel?connectTimeoutMS=5000&socketTimeoutMS=5000&maxPoolSize=200&waitQueueTimeoutMS=1000&serverSelectionTimeoutMS=5000&readPreference=secondaryPreferred
      REDIS_URL: redis://redis-server:6379/0

  frontendpvoperation:
    build:
      context: ./FrontendPVOperation
      dockerfile: Dockerfile
    container_name: react-frontend
    ports:
      - "3000:3000"
    volumes:
      - node_modules:/app/node_modules  # ✅ Mantém apenas volume necessário
    stdin_open: true
    tty: true
    environment:
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - backendpvoperation

  redis-server:
    image: redis:latest
    container_name: redis-server
    ports:
      - "6379:6379"
    volumes:
      - redis-volume:/data  # ✅ volume nomeado (não bind mount)
    command: ["redis-server", "--appendonly", "yes"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongo-server:
    image: mongo:5.0
    container_name: mongo-server
    ports:
      - "27017:27017"
    volumes:
      - mongo-volume:/data/db  # ✅ volume nomeado (melhor performance)
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    mem_limit: 4g
    cpus: 2.0

volumes:
  node_modules:
  redis-volume:
  mongo-volume:
